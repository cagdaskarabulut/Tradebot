# Generated by Django 3.0.6 on 2022-01-24 14:57

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('binance', '0035_auto_20220124_1031'),
    ]

    operations = [
        migrations.CreateModel(
            name='TotalBalanceHistory_Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('robotUsing', models.FloatField(default=0, help_text='Robotun aktif olarak kullandığı toplam tutar', verbose_name='Robot kullanıyor')),
                ('freeUsdt', models.FloatField(default=0, help_text='Boşta bekleten Usdt (Spot taki Free duran usdt miktarından bulunur. Robotun mevcut toplam parası hesaplanırken burası ile robotun kullanıdığı toplanır. ', verbose_name='Bekleyen Usdt')),
                ('manuelUsing', models.FloatField(default=0, help_text='Manuel Alınanlar Son Halinin toplam Usdt değeri', verbose_name='Manuel Alınanlar Son Hali')),
                ('transactionDate', models.DateTimeField(blank=True, default=datetime.datetime.now, help_text='İşlemin kayıt tarihi', verbose_name='İşlem tarihi')),
                ('totalCommonUsdt', models.FloatField(default=0, help_text='Genel Durum USDT - Oto. Anlık Toplam', verbose_name='Genel Durum USDT - Oto. Anlık Toplam')),
                ('totalCommonTl', models.FloatField(default=0, help_text='Genel Durum TL - Oto. Anlık Toplam TL:', verbose_name='Genel Durum TL - Oto. Anlık Toplam TL:')),
                ('totalRobot', models.FloatField(default=0, help_text='Robot Son durum', verbose_name='Robot Son durum')),
                ('totalEarn', models.FloatField(default=0, help_text='Kazan -Yeni toplam', verbose_name='Kazan -Yeni toplam')),
                ('totalOtherExchanges', models.FloatField(default=0, help_text='Diğer - Diğer Borsalar Son Hali', verbose_name='Diğer - Diğer Borsalar Son Hali')),
            ],
        ),
        migrations.CreateModel(
            name='Trade_Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstCount', models.FloatField(default=0, help_text='Ilk alınan adet (Satışlardan önce). Satışlardan sonra güncellenmez.', verbose_name='Ilk alınan adet')),
                ('count', models.FloatField(default=0, help_text='Elde kalan mevcut adet . Satışlardan sonra güncellenir.', verbose_name='Elde kalan mevcut adet')),
                ('price', models.FloatField(default=0, help_text='Alış fiyatı Usdt olarak', verbose_name='Alış fiyatı Usdt')),
                ('firstPriceAgainstBtc', models.FloatField(default=0, help_text='Alış fiyat Btc karşılığı olarak', verbose_name='Alış fiyatı Btc')),
                ('buyedByRobot', models.BooleanField(default=True, help_text='Robot tarafından mı alındı?', verbose_name='Robot mu aldı?')),
                ('howManyTimesSold', models.IntegerField(default=0, help_text='Kaç defa satıldı?', verbose_name='Satılma sayısı')),
                ('transactionDate', models.DateTimeField(blank=True, default=datetime.datetime.now, help_text='Alımın yapıldığı tarih otomatik olarak alım yapıldığında girilir', verbose_name='Alış Tarihi')),
                ('lastSellDate', models.DateField(blank=True, help_text='Satış yapıldığında tarih girilir', null=True, verbose_name='Son satış tarihi')),
                ('isPassiveInEarn', models.BooleanField(default=False, help_text='Kazan bölümünde mi ? (Eğer öyle ise satış yapılmaz sadece görüntülenir.)', verbose_name='Kazan bölümünde mi?')),
                ('isDifferentExchange', models.BooleanField(default=False, help_text='Farklı Borsada Mı (Borsada bulunan tutar USDT olarak girilir)?', verbose_name='Farklı Borsada Mı?')),
                ('differentExchangeName', models.TextField(default='Binance', help_text='Varsayılan olarak Binance girilir fakat farklı borsada ise o borsanın adı girilir', max_length=1000, null=True, verbose_name='Farklı Borsanın Adı')),
                ('indicatorResults', models.TextField(blank=True, default='', help_text='Son çalıştığında alınan indicatorlerin güncel durumları tutulur.(Alım modu açık ise her çalışmada güncellenir.)', max_length=1000, null=True, verbose_name='Son çalıştığındaki indicatorlerin durumları')),
                ('temp_currentPrice', models.FloatField(default=0, help_text='Şimdiki Fiyatı Usdt - Veritabanına yazılmaz anlık olarak çekilir', verbose_name='Şimdiki Fiyatı Usdt')),
                ('temp_totalCurrentPrice', models.FloatField(default=0, help_text='Mevcut toplam fiyatı - Veritabanına yazılmaz, gerektiğinde anlık olarak getActivePrice*count şeklinde kullanılır ', verbose_name='Mevcut toplam fiyatı')),
                ('temp_profitLossPercentage', models.FloatField(default=0, help_text='Mevcut yüzdelik kar/zarar USDT - Veritabanına yazılmaz anlık olarak çekilir', verbose_name='Mevcut yüzdelik kar/zarar USDT')),
                ('temp_differenceToBTCPercentage', models.FloatField(default=0, help_text='Mevcut yüzdelik kar/zarar BTC - Veritabanına yazılmaz anlık olarak çekilir', verbose_name='Mevcut yüzdelik kar/zarar BTC')),
                ('temp_profitLossTimes', models.FloatField(default=0, help_text='Mevcut kaç katı kar/zarar - Veritabanına yazılmaz anlık olarak çekilir', verbose_name='Mevcut kaç katı kar/zarar')),
                ('temp_differenceTotalAsUSDT', models.FloatField(default=0, help_text='Kar/Zarar farkının usdt olarak tutulduğu alan - Veritabanına yazılmaz anlık olarak çekilir', verbose_name='Kar/Zarar farkı USDT')),
                ('temp_ratioToTotalPercentage', models.FloatField(default=0, help_text='Toplam mal varlığındaki kapladığı yüzdelik yer - Veritabanına yazılmaz anlık olarak çekilir', verbose_name='Toplam mal varlığına oranı')),
                ('coin', models.ForeignKey(help_text='Coin adı burada girilir.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='trade_coin_test', to='binance.Coin', verbose_name='Coin adı')),
                ('exchangePair', models.ForeignKey(help_text='Fiyat çifti tercihen Usdt girilir.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='trade_exchangePair_test', to='binance.Coin', verbose_name='Fiyat çifti')),
            ],
        ),
        migrations.CreateModel(
            name='Preferences_Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maxLimitForRobotAsUsdt', models.FloatField(default=0, help_text='Robotun kullanacağı maksimum usdt tutarı', verbose_name='Robot bütçe')),
                ('maxOpenTradeCountForSameCoin', models.IntegerField(default=2, help_text='Aynı coinden en fazla kaç adet açık trade bulundurabilir ?', verbose_name='Aynı coin adet limiti')),
                ('isEmaControlActiveForBuying', models.BooleanField(default=True, help_text='Alım yaparken Ema kontrolü aktif mi ?(Varsayılan olarak BTC nin 20 günlük ortalama üzerinde olması şartı aranır)', verbose_name='Ema kontrolü açık mı? (Alım yaparken)')),
                ('isBuyingModeActive', models.BooleanField(default=True, help_text='Fırsat bulduğunda coin alışı yapsın mı?', verbose_name='Alış modu açık mı? ')),
                ('isSellingModeActive', models.BooleanField(default=True, help_text='Fırsat bulduğunda coin satışı yapsın mı?', verbose_name='Satış modu açık mı? ')),
                ('isFlexWhileBuying', models.BooleanField(default=True, help_text='Robot kendine ayrılan tutarın %25 inden az kullanıyorsa Alım yapılırken buysignal daki minRsi değeri 10 yukarı (varsayılan 20 ise, 30kullanılır) çekilir. Eğer %25 i geçmiş ve %50 den az ise minRsi değeri 5 yukarı(25 yani) çekilir. Robot limitinin %50 sini geçtiyse varsayılan minRsi değeri kullanılır ', verbose_name='Alım yaparken esnesin mi?')),
                ('isSellingOneStepIfDoesntPassEMAControlModeActive', models.BooleanField(default=True, help_text='Varsayılan olarak BTC nin 20 günlük ortalamanın altında kalması durumunda satış yapar', verbose_name='EMA kontrolünden geçmediyse artıda olan tradelerin yarısını satsın mı?')),
                ('isControlForPanicMode', models.BooleanField(default=True, help_text='Bu özellik açıldıysa btc son 24 saatte %10 ve üzerinde düşüş yaparsa ve Ema aşağıda olursa (Ema 20 günlük ortalama altında ise) panik modu devreye girer tüm pozisyonları kapatıp usdt ye dönülür .  ', verbose_name='Panik moduna otomatik giriş kontrolü açık mı?')),
                ('isPanicModeActive', models.BooleanField(default=True, help_text='Panik modu şuan açık mı?  (Panik modu açıldığında Alış ve satış modları kapalı ya çekilir ve kapatıldığında diğerleri açılır)', verbose_name='Panik modu şuan açık mı?')),
                ('isExistFromPanicModeAutomaticallyActive', models.BooleanField(default=True, help_text='Bu seçenek seçili ve Ema kontrolü pozitif kapanırsa panik modundan otomatik olarak çıkış yapılır ', verbose_name='Panik modundan otomatik çıkış açık mı? ')),
                ('isBuyAutomaticallyAfterPanicMode', models.BooleanField(default=True, help_text='Panik modundan otomatik çıkış açıkken panik modundan çıkış aşamasında bu alanı kontrol eder ve işaretli ise otomatik olarak birer kademe alır.', verbose_name='Panik modundan çıkışta otomatik coin al')),
                ('cooldownForNewBuyFromSameCoin', models.IntegerField(default=3, help_text='Yeni alım yapmak için minimum x gün geçmeli', verbose_name='Aynı coinin alımı için geçmesi gereken gün')),
                ('cooldownForNewSellFromSameCoin', models.IntegerField(default=3, help_text='Yeni satış yapmak için minimum x gün geçmeli', verbose_name='Aynı coinin satışı için geçmesi gereken gün')),
                ('targetPercentageForBuying', models.IntegerField(default=5, help_text='Aynı coinden alım yapılırken yeni fiyatın önceki alım fiyatından minimum yüzde x kadar ucuz olması gerekir', verbose_name='Alış yapmak için beklenen min fark')),
                ('targetPercentageForSelling', models.IntegerField(default=5, help_text='Satış yapılırken minimum yüzde x kadar kar edilmiş olması gerekir', verbose_name='Satış yapmak için beklenen min fark')),
                ('minRSI', models.IntegerField(default=20, help_text='Min RSI (Varsayılan değeri 20)', verbose_name='Min RSI')),
                ('midRSI', models.IntegerField(default=50, help_text='Mid RSI (Varsayılan değeri 50)', verbose_name='Mid RSI')),
                ('maxRSI', models.IntegerField(default=80, help_text='Max RSI (Varsayılan değeri 80)', verbose_name='Max RSI')),
                ('williamR', models.IntegerField(default=-50, help_text='WilliamR (Varsayılan değeri -50)', verbose_name='WilliamR')),
                ('commonTotalStartMoneyAsUSDT', models.FloatField(default=0, help_text='Toplam yatırılan paranın usdt olarak karşılığı', verbose_name='Başlangıç Toplam USDT')),
                ('commonTotalStartMoneyAsTL', models.FloatField(default=0, help_text='Toplam yatırılan paranın tl olarak karşılığı', verbose_name='Başlangıç Toplam TL')),
                ('addBudgetToRobotWhenTargetToTopComes_BtcTargetArea', models.FloatField(default=0, help_text='Aksiyonun tetiklenmesi için Btc nin üzerine çıkması gereken değer', verbose_name='Bütçe btc üst hedefi')),
                ('addBudgetToRobotWhenTargetToTopComes_AddBudget', models.FloatField(default=0, help_text='Btc üst hedef aksiyonu tetiklendiğinde eklenecek miktar', verbose_name='Bütçe üst hedefte eklenecek tutar')),
                ('coinTargetToCollect', models.ForeignKey(help_text='Biriktirilmesi istenen para birimini seçiniz.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='preferences_coinTargetToCollect_test', to='binance.Coin', verbose_name='Biriktirilecek para birimi')),
            ],
        ),
    ]
